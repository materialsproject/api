name: testing

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-testing.txt

      - name: Lint with pycodestyle
        run: |
          pip install pycodestyle
          pycodestyle mp_api

      - name: Lint with mypy
        run: |
          mypy --namespace-packages --explicit-package-bases mp_api

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 --count --show-source --statistics mp_api
          # exit-zero treats all errors as warnings.
          flake8 --count --exit-zero --max-complexity=20 --statistics mp_api

  test:
    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-testing.txt

      - name: Set SSL_CERT_FILE (Linux)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: export SSL_CERT_FILE=$(python -m certifi)

      - name: Set SSL_CERT_FILE (Windows)
        if: matrix.os == 'windows-latest'
        run: echo ("SSL_CERT_FILE=" + $(python -m certifi)) >> $env:GITHUB_ENV

      - name: Test with pytest
        env:
          MP_API_KEY: ${{ secrets.MP_API_KEY }}
          #MP_API_ENDPOINT: https://api-preview.materialsproject.org/
        run: |
          pip install -e .
          pytest --cov=mp_api --cov-report=xml
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  auto-gen-release:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.API_VER_BUMP_TOKEN }}
    steps:
      - uses: rymndhng/release-on-push-action@v0.20.0
        with:
          bump_version_scheme: norelease
